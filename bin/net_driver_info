#!/usr/bin/env python3
# Copyright 2017 Canonical Ltd.
# All rights reserved.
#
# Written by:
#   Jonathan Cave <jonathan.cave@canonical.com>
#
# Print info about drivers we can identify automatically and also those we
# identify in the special interest list!

from pathlib import Path
import sys

# Store pairs of (interface, driver)
driver_list = []

# Find drivers in sysfs
for interface in Path("/sys/class/net").iterdir():
    mod_path = Path("{}/device/driver/module".format(interface))
    if mod_path.is_symlink():
        driver_list.append((interface.name, mod_path.resolve().name))

# Add user requested modules to the list. Create "unknown" interfaces if none
# of the identified interfaces above are using it
for user_driver in sys.argv[1:]:
    if Path("/sys/module/{}".format(user_driver)).exists():
        if not any(x[1] == user_driver for x in driver_list):
            driver_list.append(("unknown", user_driver))
    else:
        print("Requested driver {} not loaded\n".format(user_driver))

# Produce the output
for interface, driver in driver_list:
    print("Interface {} using module {}".format(interface, driver))
    sysfs_path = Path("/sys/module/{}/parameters".format(driver))
    if sysfs_path.is_dir():
        print("  Parameters:")
        for path in Path(sysfs_path).iterdir():
            if path.is_file():
                print("    {}: {}".format(path.name, path.read_text().strip()))
    print()
